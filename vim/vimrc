set nocompatible
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
let mapleader = " "

autocmd InsertEnter * set timeoutlen=0
autocmd InsertLeave * set timeoutlen=0
autocmd BufWinLeave ?* silent! mkview
autocmd BufWinEnter ?* silent! loadview

let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[1 q"
let &t_ti ..= "\e[1 q"
let &t_te ..= "\e[0 q"

set number ruler
set autoindent smartindent cindent
set tabstop=4
set list listchars=tab:>-,trail:-
set linebreak whichwrap=b,s,<,>,[,]       " cursor auto come to the next line.

set cursorline
" syntax enable on
set foldmethod=syntax
set nofoldenable

set mouse=a
set selectmode=mouse,key
" set paste                               " conflict with coc.nvim
set wildmenu

set hlsearch incsearch
set showmatch ignorecase smartcase
set splitbelow splitright

" press <C-h> <A-h>
nnoremap h <C-W>h
nnoremap l <C-W>l
nnoremap j <C-W>j
nnoremap k <C-W>k
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bn :bn<CR>

if empty(expand(glob("~/.vim/autoload/plug.vim")))
  call system("curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
endif
call plug#begin('~/.vim/plugged')
Plug 'edkolev/tmuxline.vim'             " tmux linestatus
Plug 'bling/vim-bufferline'             " buffer info status and cmd line
Plug 'vim-airline/vim-airline'          " status-line format
Plug 'vim-airline/vim-airline-themes'   " status-line color scheme
Plug 'sainnhe/sonokai'

Plug 'tpope/vim-fugitive'             " A Git wrapper
Plug 'zivyangll/git-blame.vim'        " light plugin for echo git commit info.
Plug 'francoiscabrol/ranger.vim'      " shortcut <leader>f

Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'

Plug 'ludovicchabant/vim-gutentags' " auto-generate tags, require universal ctags and global
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'sheerun/vim-polyglot'
Plug 'puremourning/vimspector'
Plug 'jiangmiao/auto-pairs'
Plug 'fidian/hexmode'                   " hex mode for binary file

Plug 'mhinz/vim-startify'               " A simple plugin show the last file user has open
Plug 'junegunn/vim-easy-align'          " align
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'     " enable snippets
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
call plug#end()

let g:vimspector_enable_mappings = 'VSCode'

" - LeaderF ------------------------------------------
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1

" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutB = "<C-L>"
let g:Lf_ShortcutF = "<leader>ff"

noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
noremap <leader>fs :LeaderfSelf<cr>
noremap <leader>fm :LeaderfMru<cr>
noremap <leader>fF :LeaderfFunction<cr>
noremap <leader>fB :LeaderfBufTagAll<cr>
noremap <leader>fT :LeaderfBufTag<cr>
noremap <leader>fL :LeaderfLine<cr>
noremap <leader>fW :LeaderfWindow<cr>

" - colorscheme ------------------------------------------
if has("termguicolors")
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors  " enable true colors
endif

function ToggleTransparent()
  if g:sonokai_transparent_background == 0
    let g:sonokai_transparent_background = 1
  else
    let g:sonokai_transparent_background = 0
  endif

  colorscheme sonokai
endfunction

command! -nargs=0 ToggleTransparent        :call ToggleTransparent()
command! -nargs=0 TransparentToggle        :call ToggleTransparent()

nnoremap <leader>tt :call ToggleTransparent()<CR>

let g:sonokai_transparent_background = 1
let g:sonokai_better_performance = 1
let g:sonokai_style = 'shusia'
colorscheme sonokai

>>>>>>> main
"- coc-nvim -----------------------------------------------
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

<<<<<<< HEAD
=======
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Formatting selected code
xmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F <Plug>(coc-format-selected)

>>>>>>> main
"- easymotion ---------------------------------------------
nmap <leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0                 " Disable default mappings
let g:EasyMotion_smartcase = 1                  " Turn on case-insensitive feature
let g:EasyMotion_startofline = 0                " keep cursor column when JK motion
nmap , <Plug>(easymotion-bd-w)
nmap <leader>s <Plug>(easymotion-overwin-f2)
nmap <Leader>l <Plug>(easymotion-lineforward)
nmap <Leader>j <Plug>(easymotion-j)
nmap <Leader>k <Plug>(easymotion-k)
nmap <Leader>h <Plug>(easymotion-linebackward)

"- vim-airline ---------------------------------------------
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline#extensions#tmuxline#enabled = 1

"- gutentags -----------------------------------------------
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', 'Makefile']
let g:gutentags_ctags_tagfile = '.tags'
let g:gutentags_modules = ['ctags', 'gtags_cscope']
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)                 " detect if ~/.cache/tags exits.
   silent! call mkdir(s:vim_tags, 'p')
endif
let g:gutentags_ctags_extra_args = ['--extras=+q', '--output-format=e-ctags']
let g:gutentags_auto_add_gtags_cscope = 0
let g:gutentags_plus_switch = 1
let g:gutentags_define_advanced_commands = 1

"- hexmode -------------------------------------------------
let g:hexmode_patterns = '*Image,*.bin,*.exe,*.dat,*.o,*.out,*.img,*iso'

" highlight Normal guibg=NONE ctermbg=NONE
" highlight EndOfBuffer guibg=NONE ctermbg=NONE


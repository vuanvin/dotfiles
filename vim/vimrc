set nocompatible
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8

if !has('nvim')
  if has('unix')
    set viminfofile=~/.vim/viminfo
  elseif has('win32')
    set viminfofile=~/vimfiles/viminfo
  endif
endif

if has("unix")
  if empty(expand(glob("~/.vim/autoload/plug.vim")))
    call system("curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
  endif
  if exists('$WSLENV')
  endif
elseif has('win32')
  if empty(expand(glob("~/vimfiles/autoload/plug.vim")))
    call system("pwsh -CommandWithArgs \"iwr -useb 
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim | ni $HOME/vimfiles/autoload/plug.vim -Force\"")
  endif
  set termguicolors
  colorscheme desert
endif

nnoremap <Space> ""
xnoremap <Space> ""
let mapleader = " "

autocmd InsertEnter * set timeoutlen=0
autocmd InsertLeave * set timeoutlen=0
autocmd BufWinLeave ?* silent! mkview
autocmd BufWinEnter ?* silent! loadview

let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[1 q"
let &t_ti ..= "\e[1 q"
let &t_te ..= "\e[0 q"

set number ruler
filetype plugin indent on
syntax enable on
set autoindent smartindent cindent
set tabstop=4
set list listchars=tab:>-,trail:-
set linebreak whichwrap=h,l,b,s,<,>,[,]   " cursor auto come to the next line.
set cursorline
set foldmethod=syntax
set nofoldenable
set mouse=a
set selectmode=mouse,key
set wildmenu
set hlsearch incsearch
set showmatch ignorecase smartcase
set switchbuf=useopen,usetab,newtab
set splitbelow splitright
" set paste                               " conflict with coc.nvim

" press <C-h> <A-h>
nnoremap h <C-W>h
nnoremap l <C-W>l
nnoremap j <C-W>j
nnoremap k <C-W>k
nnoremap <leader>bp <CMD>bp<CR>
nnoremap <leader>bn <CMD>bn<CR>
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap b <S-Left>
cnoremap f <S-Right>

" Check if npm exists
function! s:check_npm_exists()
    let l:output = system('npm --version')
    if v:shell_error
        return 0
    else
        return 1
    endif
endfunction


call plug#begin()

if has('unix')
  Plug 'francoiscabrol/ranger.vim'      " shortcut <leader>f
  Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'     " enable snippets

  Plug 'ludovicchabant/vim-gutentags' " auto-generate tags, require universal ctags and global
endif

Plug 'mhinz/vim-startify'               " show the last files when open directory
Plug 'edkolev/tmuxline.vim'             " tmux linestatus
Plug 'bling/vim-bufferline'             " buffer info status and cmd line
Plug 'vim-airline/vim-airline'          " status-line format

Plug 'tpope/vim-fugitive'             " A Git wrapper
Plug 'zivyangll/git-blame.vim'        " light plugin for echo git commit info.
Plug 'junegunn/vim-easy-align'        " align

Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'michaeljsmith/vim-indent-object'
Plug 'kana/vim-textobj-user' | Plug 'kana/vim-textobj-entire'
Plug 'wellle/targets.vim'
Plug 'justinmk/vim-sneak'
Plug 'bkad/CamelCaseMotion'

Plug 'sheerun/vim-polyglot'
Plug 'jiangmiao/auto-pairs'
Plug 'fidian/hexmode'                   " hex mode for binary file

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Configure coc.nvim if npm exists
if s:check_npm_exists()
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif

call plug#end()

" - LeaderF ------------------------------------------
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1

" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutB = "<C-L>"
let g:Lf_ShortcutF = "<leader>ff"

noremap q: <CMD>LeaderfHistoryCmd<CR>
noremap q/ <CMD>LeaderfHistoryCmd<CR>
cnoremap <C-R> <CMD>LeaderfHistoryCmd<CR>

noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
noremap <leader>fs <CMD>LeaderfSelf<CR>
noremap <leader>fm <CMD>LeaderfMru<CR>
noremap <leader>fF <CMD>LeaderfFunction<CR>
noremap <leader>fB <CMD>LeaderfBufTagAll<CR>
noremap <leader>fT <CMD>LeaderfBufTag<CR>
noremap <leader>fL <CMD>LeaderfLine<CR>
noremap <leader>fW <CMD>LeaderfWindow<CR>

"- coc-nvim -----------------------------------------------

if s:check_npm_exists()
  set nobackup
  set nowritebackup
  set updatetime=300
  set signcolumn=yes

  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>
  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Formatting selected code
  xmap <leader>F <Plug>(coc-format-selected)
  nmap <leader>F <Plug>(coc-format-selected)
endif

"- easymotion ---------------------------------------------
nmap <leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0                 " Disable default mappings
let g:EasyMotion_smartcase = 1                  " Turn on case-insensitive feature
let g:EasyMotion_startofline = 1                " keep cursor column when JK motion
nmap <leader>; <Plug>(easymotion-bd-w)
nmap <leader>jf <Plug>(easymotion-overwin-f2)
nmap <Leader>jl <Plug>(easymotion-lineforward)
nmap <Leader>jj <Plug>(easymotion-w)
nmap <Leader>jk <Plug>(easymotion-b)
nmap <Leader>jh <Plug>(easymotion-linebackward)

"- vim-airline ---------------------------------------------
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline#extensions#tmuxline#enabled = 1

"- gutentags -----------------------------------------------
if has('unix')
  let g:ggutentags_enabled = 0
  let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', 'Makefile']
  let g:gutentags_ctags_tagfile = '.tags'
  let g:gutentags_modules = ['ctags', 'gtags_cscope']
  let s:vim_tags = expand('~/.cache/tags')
  let g:gutentags_cache_dir = s:vim_tags
  if !isdirectory(s:vim_tags)                 " detect if ~/.cache/tags exits.
     silent! call mkdir(s:vim_tags, 'p')
  endif
  let g:gutentags_ctags_extra_args = ['--extras=+q', '--output-format=e-ctags']
  let g:gutentags_auto_add_gtags_cscope = 0
  let g:gutentags_plus_switch = 1
  let g:gutentags_define_advanced_commands = 1
endif

"- hexmode -------------------------------------------------
let g:hexmode_patterns = '*Image,*.bin,*.exe,*.dat,*.o,*.out,*.img,*iso'

"- CamelCaseMotion -----------------------------------------
let g:camelcasemotion_key = '<leader>'
map <silent> <leader>W <Plug>CamelCaseMotion_w
map <silent> <leader>B <Plug>CamelCaseMotion_b
map <silent> <leader>E <Plug>CamelCaseMotion_e

